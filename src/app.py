import os
import sys
import warnings
import streamlit as st


from preprocessing import *

warnings.filterwarnings("ignore")


st.set_page_config(layout="wide")
st.image("logo.jpg", width = 100)
st.markdown("<h1 style='text-align: center; color: black;'>Electronics Recommender System</h1>", unsafe_allow_html=True)

st.sidebar.header("Recommender Model Selector") 

 
page_selectbox = st.sidebar.selectbox("Which recommender model would you like the results to be generated by?", 
                                     ("Matrix Factorisation using neural networks", "User based cosine similarity", "Item based cosine similarity", "Popularity based"))  


data = load_dataset(file_path = os.path.join(settings.PATH_RAW, "ratings_electronics.csv"))



if "visibility" not in st.session_state:
    st.session_state.visibility = "visible"
    st.session_state.disabled = False

col1, col2 = st.columns(2)    

if page_selectbox == "Matrix Factorisation using neural networks":
    df, model = recsys_matfactnn(data = data)
    userid_input = col1.selectbox("Select a user id ðŸ‘‡", df["UserID"].unique())
    recommendation_number = col2.number_input("No. of recommendations:", min_value = 1)
    u = userid_input
    K = recommendation_number
    top_n_prod = model.getRecomendation(df , u ,K )
    st.markdown("### Top {k} recommendations for userID  : {user} are - ".format( k = K  , user = u))
    st.dataframe(list(top_n_prod))
if page_selectbox == "User based cosine similarity":
    model, df = recsys_usercossim(data = data)
    userid_input = col1.selectbox("Select a user id ðŸ‘‡", df["UserID"].unique())
    recommendation_number = col2.number_input("No. of recommendations:", min_value = 1)
    u = userid_input
    K = recommendation_number
    top_n_prod = model.getRecommendations(df[df.UserID==u].UserID.values[0] , K)
    st.markdown("### Top {k} recommendations for userID  : {user} are - ".format( k = K  , user = u))
    st.dataframe(list(top_n_prod))
if page_selectbox == "Item based cosine similarity":  
    model, df = recsys_itemcossim(data = data)
    userid_input = col1.selectbox("Select a user id ðŸ‘‡", df["UserID"].unique())
    recommendation_number = col2.number_input("No. of recommendations:", min_value = 1)
    u = userid_input
    K = recommendation_number
    top_n_prod = model.getRecommendations(df[df.UserID==u].UserID.values[0] , K)
    st.markdown("### Top {k} recommendations for userID  : {user} are - ".format( k = K  , user = u))
    st.dataframe(pd.DataFrame(data = list(top_n_prod)).drop(columns = 1))
if page_selectbox == "Popularity based":
    df = recsys_popularitybased(data = data)
    recommendation_number = st.number_input("No. of recommendations:", min_value = 1)
    K = recommendation_number
    topkrecs = getTopKRecommendations(df = df , k = K) 
    st.markdown("### Top {k} recommendations are - ".format( k = K ))
    st.dataframe(pd.DataFrame(data = list(topkrecs)))
    
    
   







